name: Cleanup untagged packages
description: "A simple action to remove untagged packages from the container registry"
author: "Gerard Braad <me@gbraad.nl>"
inputs:
  packages:
    description: "Comma-separated list of container registry package names to clean up"
    required: true
    type: string
  token:
    required: false
    type: string
    default: ${{ github.token }}
  owner:
    required: false
    type: string
    default: ${{ github.repository_owner }} 
runs:
  using: 'composite'
  steps:
    - name: Cleanup
      id: cleanup
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const owner = '${{ inputs.owner }}';
          const packageList = '${{ inputs.packages }}'.split(',').map(pkg => pkg.trim());
          
          // Process each package
          for (const packageName of packageList) {
            console.log(`\n==================================`);
            console.log(`Cleaning up untagged versions for ${owner}/${packageName}`);
            console.log(`==================================`);
            
            try {
              // First determine if the owner is an org or a user
              let ownerType;
              try {
                await github.rest.orgs.get({
                  org: owner
                });
                ownerType = 'org';
              } catch (err) {
                if (err.status === 404) {
                  ownerType = 'user';
                } else {
                  throw err;
                }
              }
              
              console.log(`Owner type determined as: ${ownerType}`);
              
              // Get package versions
              let packageVersions;
              if (ownerType === 'org') {
                const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                  package_type: 'container',
                  package_name: packageName,
                  org: owner
                });
                packageVersions = response.data;
              } else {
                const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                  package_type: 'container',
                  package_name: packageName,
                  username: owner
                });
                packageVersions = response.data;
              }
              
              console.log(`Found ${packageVersions.length} package versions for ${packageName}`);
              
              // Process each package version
              let successCount = 0;
              let failCount = 0;
              let skipCount = 0;
              
              for (const version of packageVersions) {
                if (!version.metadata.container.tags || version.metadata.container.tags.length === 0) {
                  console.log(`Attempting to delete untagged version ${version.id}`);
                  
                  try {
                    if (ownerType === 'org') {
                      await github.rest.packages.deletePackageVersionForOrg({
                        package_type: 'container',
                        package_name: packageName,
                        org: owner,
                        package_version_id: version.id
                      });
                    } else {
                      await github.rest.packages.deletePackageVersionForUser({
                        package_type: 'container',
                        package_name: packageName,
                        username: owner,
                        package_version_id: version.id
                      });
                    }
                    
                    console.log(`Successfully deleted version ${version.id}`);
                    successCount++;
                  } catch (deleteErr) {
                    console.log(`Failed to delete version ${version.id}: ${deleteErr.message}`);
                    failCount++;
                  }
                } else {
                  console.log(`Skipping version ${version.id} as it has ${version.metadata.container.tags.length} tags`);
                  skipCount++;
                }
              }
              
              console.log(`\n===== Package ${packageName} Summary =====`);
              console.log(`Deleted: ${successCount}`);
              console.log(`Failed: ${failCount}`);
              console.log(`Skipped (tagged): ${skipCount}`);
              console.log(`============================`);
              
            } catch (error) {
              console.error(`Error processing package ${packageName}: ${error.message}`);
              if (error.status) console.error(`Status code: ${error.status}`);
            }
          }
